{"version":3,"sources":["TickerTable.js","App.js","serviceWorker.js","index.js"],"names":["TickerTable","state","tickers","_this2","this","connection","WebSocket","onerror","error","console","log","onmessage","e","updateTicker","JSON","parse","data","_this3","forEach","_ref","_ref2","Object","slicedToArray","name","price","ticker","getTickerData","setState","history","diff","undefined","length","concat","slice","time","Date","format","currentTime","getYear","getDate","getTime","fecha","_this4","react_default","a","createElement","className","keys","map","priceClass","key","toFixed","getFormattedTime","build","limit","height","margin","color","Component","App","TickerTable_TickerTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5df90ee6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport fecha from \"fecha\";\nimport { Sparklines, SparklinesLine, SparklinesSpots } from \"react-sparklines\";\n\nconst LIMIT = 20;\n\nexport default class TickerTable extends Component {\n  state = { tickers: {} };\n\n  componentDidMount() {\n    let connection = new WebSocket(\"ws://stocks.mnet.website\");\n\n    // Log errors\n    connection.onerror = error => {\n      console.log(\"WebSocket Error \" + error);\n    };\n\n    //Update tickers\n    connection.onmessage = e => this.updateTicker(JSON.parse(e.data));\n  }\n\n  updateTicker(data) {\n    let { tickers } = this.state;\n    data.forEach(([name, price]) => {\n      let ticker = tickers[name];\n      tickers[name] = this.getTickerData(ticker, price);\n    });\n    this.setState({ tickers });\n  }\n\n  getTickerData(ticker, price) {\n    let history = [price];\n    let diff = 0;\n    if (ticker !== undefined) {\n      diff = price - ticker.price;\n      if (ticker.history.length < LIMIT) {\n        history = ticker.history.concat(price);\n      } else {\n        history = ticker.history.slice(1).concat(price);\n      }\n    }\n\n    return {\n      price,\n      history,\n      diff,\n      time: new Date()\n    };\n  }\n\n  getFormattedTime(time) {\n    let format = \"HH:mm A\";\n    let currentTime = new Date();\n\n    //last updated before today with different calendar year\n    if (time.getYear() < currentTime.getYear()) format = \"DD MMM YYYY HH:mm A\";\n    //last updated before today\n    if (time.getDate() < currentTime.getDate()) format = \"DD MMM HH:mm A\";\n    //last updated is less than 20 seconds\n    else if ((time.getTime() - currentTime.getTime()) / 1000 < 20) format = \"\";\n    return format === \"\" ? \"A few seconds ago\" : fecha.format(time, format);\n  }\n\n  render() {\n    let { tickers } = this.state;\n    return (\n      <section>\n        <div className=\"table\">\n          <div className=\"theader\">\n            <div className=\"ticker\">Ticker</div>\n            <div className=\"price\">Price</div>\n            <div className=\"last-update\">Last Update</div>\n            <div className=\"trend\">Trend</div>\n          </div>\n          {Object.keys(tickers).map(name => {\n            let ticker = tickers[name];\n            let priceClass =\n              ticker.diff > 0 ? \"green\" : ticker.diff < 0 ? \"red\" : \"\";\n            return (\n              <div className=\"row\" key={name}>\n                <div className=\"small\">\n                  <div className=\"cell\">Ticker</div>\n                  <div className=\"cell ticker\">{name}</div>\n                </div>\n                <div className=\"small\">\n                  <div className=\"cell\">Price</div>\n                  <div className={`cell ${priceClass}`}>\n                    {ticker.price.toFixed(2)}\n                  </div>\n                </div>\n                <div className=\"small\">\n                  <div className=\"cell\">Last Update</div>\n                  <div className=\"cell last-update\">\n                    {this.getFormattedTime(ticker.time)}\n                  </div>\n                </div>\n                <div className=\"small\">\n                  <div className=\"cell\">Trend</div>\n                  <div className=\"cell\">\n                    <Sparklines\n                      data={ticker.history}\n                      limit={LIMIT}\n                      height={20}\n                      margin={5}\n                    >\n                      <SparklinesLine color=\"#1C8CDC\" />\n                      <SparklinesSpots />\n                    </Sparklines>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TickerTable from \"./TickerTable\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>Stock App</header>\n        <TickerTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}